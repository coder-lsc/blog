import{_ as a,o as e,c as t,Q as o}from"./chunks/framework.874cb1ca.js";const m=JSON.parse('{"title":"webpack loader 的原理解析","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"webpack/what-is-loader.md","filePath":"webpack/what-is-loader.md"}'),r={name:"webpack/what-is-loader.md"},l=o('<h1 id="webpack-loader-的原理解析" tabindex="-1">webpack loader 的原理解析 <a class="header-anchor" href="#webpack-loader-的原理解析" aria-label="Permalink to &quot;webpack loader 的原理解析&quot;">​</a></h1><h2 id="loader-起到什么作用" tabindex="-1">loader 起到什么作用 <a class="header-anchor" href="#loader-起到什么作用" aria-label="Permalink to &quot;loader 起到什么作用&quot;">​</a></h2><ul><li><p>核心作用：将所有复杂资源（如.png/.css/.less/.jsx/.ts 等等）转换为 webpack 可以直接处理的.js 或.json 文件（webpack 只能对.js 和.json 文件进行直接处理）</p></li><li><p>其他作用：扫描代码、修改代码（如 eslint-loader/babel-loader）</p></li></ul><h2 id="loader-种类-顺序" tabindex="-1">loader 种类 &amp; 顺序 <a class="header-anchor" href="#loader-种类-顺序" aria-label="Permalink to &quot;loader 种类 &amp; 顺序&quot;">​</a></h2><p>loader 可以被分为四类，分别是：后置 post，普通 normal，行内 inline，前置 pre</p><p>四种 loader 调用先后顺序为：pre &gt; normal &gt; inline &gt; post</p><p>同级数组test匹配时的优先级为，自下而上，自右向左。（pitch 情况下，则反过来)</p><h2 id="pitch" tabindex="-1">pitch <a class="header-anchor" href="#pitch" aria-label="Permalink to &quot;pitch&quot;">​</a></h2><p>loader 如果设置了 pitch 函数，可以利用其熔断机制终端后面的 loader；及其 data 可以在 pitch 执行时和正常执行时进行共享。</p>',9),d=[l];function i(p,s,c,n,h,_){return e(),t("div",null,d)}const k=a(r,[["render",i]]);export{m as __pageData,k as default};
