import{_ as a,o as s,c as l,Q as n}from"./chunks/framework.874cb1ca.js";const E=JSON.parse('{"title":"浏览器跨域问题","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"network/cors.md","filePath":"network/cors.md"}'),e={name:"network/cors.md"},o=n(`<h1 id="浏览器跨域问题" tabindex="-1">浏览器跨域问题 <a class="header-anchor" href="#浏览器跨域问题" aria-label="Permalink to &quot;浏览器跨域问题&quot;">​</a></h1><h2 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h2><ul><li>协议</li><li>域名</li><li>端口号</li></ul><h2 id="cors-跨域资源共享" tabindex="-1">CORS 跨域资源共享 <a class="header-anchor" href="#cors-跨域资源共享" aria-label="Permalink to &quot;CORS 跨域资源共享&quot;">​</a></h2><h3 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h3><p>满足条件：</p><ul><li>GET, POST, HEAD</li><li>Content-Type 为 text/plain ，multipart/form-data，application/x-www-form-urlencoded</li></ul><h3 id="复杂请求-预请求-options" tabindex="-1">复杂请求&amp;预请求（options） <a class="header-anchor" href="#复杂请求-预请求-options" aria-label="Permalink to &quot;复杂请求&amp;预请求（options）&quot;">​</a></h3><p>复杂请求发起前，浏览器会自动发起预请求向服务器验证请求信息是否通过</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 允许cors跨域资源共享</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 允许所有方法 如put delete</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">// 允许 Content-Type 头部</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">,</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 允许cors跨域资源共享</span></span>
<span class="line"><span style="color:#032F62;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 允许所有方法 如put delete</span></span>
<span class="line"><span style="color:#032F62;">&#39;Access-Control-Allow-Methods&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">// 允许 Content-Type 头部</span></span>
<span class="line"><span style="color:#032F62;">&#39;Access-Control-Allow-Headers&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">,</span></span></code></pre></div><h2 id="jsonp" tabindex="-1">jsonp <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;jsonp&quot;">​</a></h2><p>原理：script 标签访问时，可以跨越同源策略限制</p><p>特点：</p><ul><li>通过 script 标签发起 get 请求</li><li>从其它域加载 JavaScript 脚本并直接执行，需要提前定义 callback 函数接收数据</li></ul><p>缺点：</p><ul><li>只支持 get 请求</li><li>从其它域加载 JavaScript 脚本时易被攻击</li></ul><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h2><p>原理：用一个可以实现跨域的服务器去转发请求，因为服务器和服务器间发送请求没有同源策略的限制</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>iframe</li><li>postmessage</li><li>websocket</li></ul>`,20),t=[o];function p(r,c,i,d,h,u){return s(),l("div",null,t)}const _=a(e,[["render",p]]);export{E as __pageData,_ as default};
