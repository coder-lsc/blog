import{_ as a,o as s,c as e,Q as n}from"./chunks/framework.874cb1ca.js";const g=JSON.parse('{"title":"webpack Tree-Shaking","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"webpack/tree-shaking.md","filePath":"webpack/tree-shaking.md"}'),l={name:"webpack/tree-shaking.md"},o=n(`<h1 id="webpack-tree-shaking" tabindex="-1">webpack Tree-Shaking <a class="header-anchor" href="#webpack-tree-shaking" aria-label="Permalink to &quot;webpack Tree-Shaking&quot;">​</a></h1><h2 id="tree-shaking-定义" tabindex="-1">Tree-Shaking 定义 <a class="header-anchor" href="#tree-shaking-定义" aria-label="Permalink to &quot;Tree-Shaking 定义&quot;">​</a></h2><p>Tree-Shaking 是一种基于 ES Module 规范的 Dead Code Elimination 技术，它会在运行过程中静态分析模块之间的导入导出，确定 ESM 模块中哪些导出值未曾其它模块使用，并将其删除，以此实现打包产物的优化。</p><h2 id="为什么只能是-es-module" tabindex="-1">为什么只能是 ES Module <a class="header-anchor" href="#为什么只能是-es-module" aria-label="Permalink to &quot;为什么只能是 ES Module&quot;">​</a></h2><p>因为 esm 规范下，import 语句必须在顶层，这样才能进行静态分析。cjs 的 require 可能在 if 语句中，无法进行静态分析。</p><h2 id="shaking-核心流程" tabindex="-1">Shaking 核心流程 <a class="header-anchor" href="#shaking-核心流程" aria-label="Permalink to &quot;Shaking 核心流程&quot;">​</a></h2><ol><li><p>首先，Webpack 需要弄清楚每个模块分别有什么导出值，这一过程发生在 make 阶段</p></li><li><p>模块导出信息收集完毕后，Webpack 需要标记出各个模块的导出列表中，哪些导出值有被其它模块用到，哪些没有。这一过程发生在 Seal 阶段</p></li><li><p>生成代码时给没有用到的值上加上代码注释 <strong>/* unused harmony export xxx */</strong></p></li><li><p>由 Terser 扫描注释，根据命中注释中的内容删除对应的变量</p></li></ol><h2 id="在-webpack-中启动-tree-shaking" tabindex="-1">在 Webpack 中启动 Tree Shaking <a class="header-anchor" href="#在-webpack-中启动-tree-shaking" aria-label="Permalink to &quot;在 Webpack 中启动 Tree Shaking&quot;">​</a></h2><p>在 Webpack 中，启动 Tree Shaking 功能必须同时满足三个条件：</p><ul><li>使用 ESM 规范编写模块代码</li><li>配置 optimization.usedExports 为 true，启动标记功能</li><li>启动代码优化功能，可以通过如下方式实现： <ul><li>配置 mode = production</li><li>配置 optimization.minimize = true</li><li>提供 optimization.minimizer 数组</li></ul></li></ul><h2 id="副作用" tabindex="-1">副作用 <a class="header-anchor" href="#副作用" aria-label="Permalink to &quot;副作用&quot;">​</a></h2><p>例如：如果模块中直接操作对象、变量，如 window、Array.prototype 等与模块导入无关的操作，那么这个模块就具有副作用。</p><p>&quot;sideEffects&quot; 字段，以告知构建工具哪些模块可以安全地进行树摇</p><p>比如在一个文件（./src/some-module.js）中定义了 window.a = 1，如果设置了&quot;sideEffects&quot;: false，静态分析到 window.a 没有被导出，则 window.a 会被 tree-shaking 掉，会导致意料之外的错误发生。因此要将该文件声明在 sideEffects 副作用中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 表示./src/some-module有副作用 不对./src/some-module进行tree-shaking</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;sideEffects&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;./src/some-module.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 表示所有模块都是无副作用</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;sideEffects&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 表示./src/some-module有副作用 不对./src/some-module进行tree-shaking</span></span>
<span class="line"><span style="color:#032F62;">&quot;sideEffects&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;./src/some-module.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 表示所有模块都是无副作用</span></span>
<span class="line"><span style="color:#032F62;">&quot;sideEffects&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span></span></code></pre></div><h3 id="pure-纯函数" tabindex="-1">pure 纯函数 <a class="header-anchor" href="#pure-纯函数" aria-label="Permalink to &quot;pure 纯函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">#</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">__PURE__</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">// 代表这个函数是纯函数 没有副作用 可以tree-shaking掉</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/#</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">__PURE__</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">// 代表这个函数是纯函数 没有副作用 可以tree-shaking掉</span></span></code></pre></div><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><p>链接：<a href="https://juejin.cn/post/7002410645316436004" target="_blank" rel="noreferrer">https://juejin.cn/post/7002410645316436004</a></p>`,19),p=[o];function t(i,r,c,h,d,u){return s(),e("div",null,p)}const m=a(l,[["render",t]]);export{g as __pageData,m as default};
