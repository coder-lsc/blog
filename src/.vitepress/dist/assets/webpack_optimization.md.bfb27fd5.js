import{_ as a,o as e,c as l,Q as i}from"./chunks/framework.874cb1ca.js";const _=JSON.parse('{"title":"webpack 优化","description":"","frontmatter":{"layout":"doc"},"headers":[],"relativePath":"webpack/optimization.md","filePath":"webpack/optimization.md"}'),t={name:"webpack/optimization.md"},o=i('<h1 id="webpack-优化" tabindex="-1">webpack 优化 <a class="header-anchor" href="#webpack-优化" aria-label="Permalink to &quot;webpack 优化&quot;">​</a></h1><h2 id="优化角度" tabindex="-1">优化角度 <a class="header-anchor" href="#优化角度" aria-label="Permalink to &quot;优化角度&quot;">​</a></h2><ul><li>编译速度</li><li>打包体积</li></ul><h2 id="如何提高编译速度" tabindex="-1">如何提高编译速度 <a class="header-anchor" href="#如何提高编译速度" aria-label="Permalink to &quot;如何提高编译速度&quot;">​</a></h2><ul><li><p>减少查找过程（优化 webpack 配置中的 resolve，优化查找对应文件的速度）</p></li><li><p>缩小构建目标（loader 配置时设置 exclude 和 include）</p></li><li><p>多线程打包（如 happypack、thread-loader）</p></li><li><p>在编译工具上做文章（如 babel 改用 swc，esbuild-loader 等）</p></li><li><p><strong>给编译结果做缓存</strong></p></li><li><p>sourceMap 不用太详细</p></li></ul><h3 id="编译缓存" tabindex="-1">编译缓存 <a class="header-anchor" href="#编译缓存" aria-label="Permalink to &quot;编译缓存&quot;">​</a></h3><ul><li><p>dll（动态链接库）：给一些常年不变的第三方库，如 react、loadsh 等，做缓存映射。vue-cli 和 cra 都在 webpack 4 的时候去除了 dll，commit 信息上说 webpack 4 的打包效率已经不需要再使用 dll 了</p></li><li><p>cache-loader：给耗时长的 loader 设置缓存，如 babel-loader</p></li><li><p>HardSourceWebpackPlugin/webpack 5 内置文件缓存（最优）</p></li></ul><h3 id="如何减小打包体积" tabindex="-1">如何减小打包体积 <a class="header-anchor" href="#如何减小打包体积" aria-label="Permalink to &quot;如何减小打包体积&quot;">​</a></h3><ul><li><p>路由懒加载（减小主包体积）</p></li><li><p>splitChunk 分包（减小主包体积）：对 node_modules 和公共模块如 utils/request/storage 封装等模块都进行分包</p></li><li><p>tree-shaking：去除死代码和无效导出</p></li><li><p>资源压缩（js 压缩/css 压缩/图片压缩）</p></li><li><p>externals：将很大的三方库改用 cdn 链接引入，如 vue、echarts（由于包减小了，同时也能优化速度）</p></li></ul>',9),r=[o];function p(c,s,d,n,h,u){return e(),l("div",null,r)}const k=a(t,[["render",p]]);export{_ as __pageData,k as default};
